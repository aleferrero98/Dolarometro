name: Build and Push Docker Image

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        # Get the latest tag or start from 0.0.0
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
        
        # Check commit message for version specification
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        # Look for version pattern in commit message (e.g., "version: 1.2.3" or "v1.2.3")
        if echo "$COMMIT_MSG" | grep -qE "(version:|v)[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+"; then
          # Extract version from commit message
          VERSION_FROM_COMMIT=$(echo "$COMMIT_MSG" | grep -oE "(version:|v)[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | head -1)
          echo "Version specified in commit: $VERSION_FROM_COMMIT"
          
          # Check if version already exists
          if git tag -l | grep -q "^$VERSION_FROM_COMMIT$"; then
            echo "⚠️ Version $VERSION_FROM_COMMIT already exists!"
            echo "🔄 Falling back to auto-increment..."
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "Auto-incremented version: $NEW_VERSION"
          else
            NEW_VERSION="$VERSION_FROM_COMMIT"
            echo "✅ Using specified version: $NEW_VERSION"
          fi
        else
          # Auto-increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Auto-incrementing patch version"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Git Tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}
